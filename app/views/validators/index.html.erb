<p id="notice"><%= notice %></p>
<div class="row">
  <div class="col-lg-12">
    <p>
      Meet the validators who power Solana, the world's fastest blockchain! The table below show each validator by name and includes some recent statistics for each. You will also see color-coded validator scores (beta) to help you assess the relative performance of each node. See our <%= link_to 'FAQ', faq_url(network: params[:network]), target: '_blank' %> to learn how the scores are calculated. <small>(You can also hover your mouse over the circular score icons below for a short description.)</small> Special thanks to <%= link_to 'Staking Facilities', 'https://stakingfacilities.com/', target: '_blank' %> for their support!
    </p>
  </div>
</div>
<h1>Solana <%= params[:network].capitalize%> Validators</h1>
<% unless @validators.empty? %>
  <div class="row">
    <div class="col-sm-8">
      <ul class="nav nav-tabs">
        <li class="nav-item">
          <a class="nav-link disabled" href="#" tabindex="-1" aria-disabled="true">Sort:</a>
        </li>
        <li class="nav-item">
          <%= link_to 'Random', url_for(order: 'random', page: params[:page], network: params[:network], refresh: params[:refresh]), class: "nav-link #{'active' unless %w[score name stake].include?(params[:order])}"  %>
        </li>
        <li class="nav-item">
          <%= link_to 'Stake', url_for(order: 'stake', page: params[:page], network: params[:network], refresh: params[:refresh]), class: "nav-link #{'active' if params[:order] == 'stake'}"  %>
        </li>
        <li class="nav-item">
          <%= link_to 'Score', url_for(order: 'score', page: params[:page], network: params[:network], refresh: params[:refresh]), class: "nav-link #{'active' if params[:order] == 'score'}"  %>
        </li>
        <li class="nav-item">
          <%= link_to 'Name', url_for(order: 'name', page: params[:page], network: params[:network], refresh: params[:refresh]), class: "nav-link #{'active' if params[:order] == 'name'}"  %>
        </li>

      </ul>
    </div>
    <div class="col-sm-4">
      <%= form_with(method: :get, local: true) do %>
        <div class="form-group-row">
          <div class="input-group mb-3">
            <%= text_field_tag(:q, '', placeholder: 'Starts with...', class: 'form-control') %>
          <%= hidden_field_tag(:network, params[:network]) %>
          <%= hidden_field_tag(:order, params[:order]) %>
          <%= hidden_field_tag(:refresh, params[:refresh]) %>
          <div class="input-group-append">
            <%= submit_tag("Search", class: 'btn btn-outline-secondary') %>
          </div>
        </div>
      </div>
      <% end %>
    </div>
  </div>
  <div class="row">
    <div class="col-sm-10">
      <small>
        Data updated at <%= @batch&.created_at || 'N/A' %> in batch <%= @batch&.uuid || 'N/A' %>. <%= link_to 'See Data Centers', data_centers_url(network: params[:network]) %>
      </small>
    </div>
    <div class='col-sm-2 text-right'>
      <% if params[:refresh] == 'true' %>
        <%= link_to raw('<i class="fas fa-toggle-on toggle"></i>'), url_for(order: params[:order], page: params[:page], network: params[:network], q: params[:q], refresh: false)  %>
        <small>Refresh ON</small>
      <% else %>
        <%= link_to raw('<i class="fas fa-toggle-off toggle"></i>'), url_for(order: params[:order], page: params[:page], network: params[:network], q: params[:q], refresh: true)  %>
        <small>Refresh OFF</small>
      <% end %>
    </div>
  </div>
  <div class="row">
    <div class="col-sm-12">
      <table id="validators-table" class='table table-striped table-borderless spark-line-table'>
        <thead class="thead-dark">
          <tr>
            <th class="avatar-column">&nbsp;</th>
            <th class="name-column">
              Name <small>(Commission)</small><br />
              Active Stake <small>(<%= number_to_human(lamports_to_sol(@total_active_stake)) %>)</small><br />
              Software <small>(<%= Rails.application.credentials.solana["software_patch_#{params[:network]}".to_sym] %>)</small><br />
              Scores <small>(total)</small>
            </th>
            <th class='text-right'>
              Root<br />Distance<br />
              <small>60-Min Chart</small>
            </th>
            <th class='text-right'>
              Vote<br />Distance<br />
              <small>60-Min Chart</small>
            </th>
            <th class='text-right'>
              Skipped<br />Slot &percnt;<br />
              <small>60-Min Chart</small>
            </th>
            <th class='text-right'>
              Skipped<br />Vote &percnt;<br />
              <small>(Work-In-Progress)</small>
            </th>
            <th class='text-right'>Average<br />Ping Time (ms)</th>
          </tr>
        </thead>

        <tbody>
          <tr>
            <td colspan="2" class="avatar-column">
              Cluster Height/Stats:<br />
              Epoch: <%= @this_epoch&.epoch %>
            </td>
            <td class='text-right name-column'>
              <%= number_with_delimiter @tower_highest_block %>
            </td>
            <td class='text-right'>
              <%= number_with_delimiter @tower_highest_vote %>
            </td>
            <td class='text-right'>
              Md: <%= number_to_percentage(@skipped_slot_median.to_f * 100.0, precision: 1) %><br />
              Av: <%= number_to_percentage(@skipped_slot_average.to_f * 100.0, precision: 1) %>
            </td>
            <td class='text-right'>
              Min: <%= number_to_percentage(@skipped_vote_percent_best.to_f * 100.0, precision: 2) %>
            </td>
            <td class='text-right'>
              Av: <%= @ping_time_avg.nil? ? 'N/A' : @ping_time_avg&.to_f.round(1)  %>
            </td>
          </tr>
          <%
              i = if params[:page].nil? || params[:page].empty? || params[:page].to_i.zero?
                    0
                  else
                    (params[:page].to_i - 1) * Kaminari.config.default_per_page
                  end
          %>
          <% @validators.each do |validator| %>
          <% i += 1 %>
            <tr>
              <td class="avatar-column">
                <small><%= i %></small>&nbsp;
                <span class="avatar">
                  <% if validator.avatar_url %>
                    <%= image_tag validator.avatar_url, class: 'img-circle' %>
                  <% else %>
                    <%= image_tag 'https://keybase.io/images/no-photo/placeholder-avatar-180-x-180@2x.png', class: 'img-circle' %>
                  <% end %>
                </span>
                <% if validator.delinquent? %>
                  <br />
                  <small class="score-minus-2">DELINQUENT</small>
                <% end %>
                </td>
                <td class="name-column">
                <%
                  validator_name = if validator.name
                    validator.name
                  else
                    shorten_key(validator.account)
                  end
                %>
                  <%= link_to validator_name,
                              validator_url(
                                network: params[:network],
                                account: validator.account,
                                order: params[:order],
                                page: params[:page],
                                refresh: params[:refresh]
                              ) %>
                  <%
                    comm_class = 'text-red' \
                      if params[:network] == 'mainnet' &&
                         validator.commission.to_i == 100
                  %>
                  <small class="<%= comm_class %>">(<%= validator.commission %>%)</small><br />
                  <small>
                    <%= number_with_delimiter lamports_to_sol(validator.active_stake) %>
                    (<%= number_to_percentage(validator.stake_concentration.to_f * 100.0, precision: 1) %>)
                  </small>
                  <br />
                  <small  class="<%= software_color_class(validator.software_version) %>">
                    <%= validator.software_version || 'N/A' %>
                  </small>
                  <br />
                  <small>
                    <i class="fas fa-circle score-<%= validator.root_distance_score %>"
                       title="Root Distance Score = <%= validator.root_distance_score %>"></i>&nbsp;
                    <i class="fas fa-circle score-<%= validator.vote_distance_score %>"
                       title="Vote Distance Score = <%= validator.vote_distance_score %>"></i>&nbsp;
                    <i class="fas fa-circle score-<%= validator.skipped_slot_score %>"
                       title="Skipped Slot Score = <%= validator.skipped_slot_score %>"></i>&nbsp;

                   <i class="fas fa-circle score-<%= validator.published_information_score.to_i %>"
                      title="Published Information Score = <%= validator.published_information_score.to_i %>"></i>&nbsp;

                   <i class="fas fa-circle score-<%= validator.software_version_score %>"
                      title="Software Version Score = <%= validator.software_version_score %>"></i>&nbsp;

                      <i class="fas fa-circle score-<%= validator.security_report_score.to_i %>"
                         title="Security Report Score = <%= validator.security_report_score.to_i %>"></i>&nbsp;

                    <% if validator.stake_concentration_score < 0 %>
                      <%
                        score_class = \
                          if validator.stake_concentration_score == -2
                            'score-minus-2'
                          else
                            'score-minus-1'
                          end
                      %>
                      <i class="fas fa-minus-circle <%= score_class %>" title="Stake Concentration Score = <%= validator.stake_concentration_score %>"></i>&nbsp;
                    <% end %>

                    <% if validator.data_center_concentration_score < 0 %>
                      <%
                        score_class = \
                          if validator.data_center_concentration_score == -2
                            'score-minus-2'
                          else
                            'score-minus-1'
                          end
                      %>
                      <i class="fas fa-minus-circle <%= score_class %>" title="Data Center Concentration Score = <%= validator.data_center_concentration_score %>"></i>&nbsp;
                    <% end %>
                    (<%= validator.total_score %>)
                  </small>
              </td>

              <!-- ROOT DISTANCE -->
              <td class="spark-line text-right">
                <%
                    vl = \
                      if validator.score&.root_distance_history.to_a.count < 60
                        validator.score&.root_distance_history.to_a.count
                      else
                        60
                      end
                    line_color = if validator.root_distance_score == 2
                        'Green'
                      elsif validator.root_distance_score == 1
                        'Blue'
                      else
                        'Gray'
                      end
                    vector = validator.score&.root_distance_history.to_a[-vl..-1]
                 %>

                <%= render 'validators/spark_line_block_distance',
                        account: validator.account,
                        vector: vector,
                        line_color: line_color
                %>
              </td>

              <!-- VOTE DISTANCE -->
              <td class="spark-line text-right">
                <%
                    vl = \
                      if validator.score&.vote_distance_history.to_a.count < 60
                        validator.score&.vote_distance_history.to_a.count
                      else
                        60
                      end
                    line_color = if validator.vote_distance_score == 2
                        'Green'
                      elsif validator.vote_distance_score == 1
                        'Blue'
                      else
                        'Gray'
                      end
                    vote_vector = validator.score&.vote_distance_history.to_a[-vl..-1]
                 %>

                <%= render 'validators/spark_line_vote_distance',
                        account: validator.account,
                        vector: vote_vector,
                        line_color: line_color
                %>
              </td>

              <!-- SKIPPED SLOTS  -->
              <td class="spark-line text-right">
                <%
                    vl = \
                      if validator.score&.skipped_slot_history.to_a.count < 60
                        validator.score&.skipped_slot_history.to_a.count
                      else
                        60
                      end
                    line_color = if validator.skipped_slot_score == 2
                        'Green'
                      elsif validator.skipped_slot_score == 1
                        'Blue'
                      else
                        'Gray'
                      end
                    slot_vector = validator.score&.skipped_slot_history.to_a[-vl..-1].map {|v| (v.to_f*100.0).round(1)}
                 %>

                <%= render 'validators/spark_line_skipped_slots',
                        account: validator.account,
                        vector: slot_vector,
                        line_color: line_color
                %>
              </td>
              <td class="text-right">
                <%
                  vahl = validator.vote_account_last&.vote_account_history_last %>
                <%=
                number_to_percentage(
                  ((vahl.slot_index_current.to_i - vahl.credits_current.to_i)/vahl.slot_index_current.to_f)*100.0,
                  precision: 2
                ) if vahl
                 %>
              </td>
              <%
                ping_color = if validator.ping_time_avg.nil?
                  'score-0'
                elsif validator.ping_time_avg.to_f <= @ping_time_avg.to_f
                  'score-2'
                else
                  'score-1'
                end
               %>
              <td class="<%= ping_color %> text-right">
                <%= validator.ping_time_avg.nil? ? 'N/A' : validator.ping_time_avg.to_f.round(1)  %>
              </td>
            </tr>
          <% end %>
        </tbody>
      </table>
      <%= paginate @validators, theme: 'bootstrap4' %>
      <small>Data updated at <%= @batch&.created_at || 'N/A' %> in batch <%= @batch&.uuid || 'N/A' %></small>

    </div>
  </div>
<% end %>
<% if @software_versions %>
  <hr />
  <h3>Software Versions</h3>
  <div class="row">
    <div class="col-lg-12">
      <table class="table table-striped table-borderless">
        <thead class="thead-dark">
          <tr>
            <th>Software Version</th>
            <th>Count</th>
          </tr>
        </thead>
        <tbody>
          <% @software_versions.payload.each do |group| %>
            <tr>
              <td><%= group.first[0] %></td>
              <td><%= group.first[1] %></td>
            </tr>
          <% end %>
        </tbody>

      </table>
    </div>
  </div>
<% end %>
