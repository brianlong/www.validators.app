<%= render 'validators/banner' %>
<% unless @validators.empty? %>
  <%= render 'validators/stats' %>

  <div class="card">
    <div class="card-content pb-0">
      <h1 class="h2 card-heading">Solana <%= params[:network].capitalize %> Validators</h1>

      <%= render 'validators/sort_bar' %>

      <div class="row">
        <div class="col-md-9 col-lg-10">
          <p class="small muted">
            Data updated at <%= @batch&.created_at || 'N/A' %> in batch <%= @batch&.uuid || 'N/A' %>.
            <%= link_to 'See Data Centers', data_centers_url(network: params[:network]) %>
          </p>
        </div>
        <div class='col-md-3 col-lg-2 toggle-container'>
          <% if params[:refresh] == 'true' %>
            <%= link_to raw('<i class="fas fa-toggle-on toggle"></i>'),
                        url_for(order: params[:order], page: params[:page], network: params[:network], q: params[:q], refresh: false) %>
            <p class="small muted toggle-label">REFRESH ON</p>
          <% else %>
            <%= link_to raw('<i class="fas fa-toggle-off toggle"></i>'),
                        url_for(order: params[:order], page: params[:page], network: params[:network], q: params[:q], refresh: true) %>
            <p class="small muted toggle-label">REFRESH OFF</p>
          <% end %>
        </div>
      </div>
    </div>


    <div class="row">
      <div class="col-sm-12">
        <table id="validators-table" class='table table-block-sm'>
          <thead>
          <tr>
            <th class="avatar-column">#</th>
            <th class="name-column pr-1">
              Name <small class="text-muted">(Commission)</small><br />
              Active Stake <small class="text-muted">(<%= number_to_human(lamports_to_sol(@total_active_stake)) %>)</small><br />
              Software
              <small class="text-muted">
                <% if params[:network] == 'mainnet' %>
                  (<%= MAINNET_CLUSTER_VERSION %>)
                <% else %>
                  (<%= TESTNET_CLUSTER_VERSION %>)
                <% end %>
              </small>
              <br />
              Scores <small class="text-muted">(total)</small>
            </th>
            <th class='percent-column pl-1 text-right'>
              Skipped Vote&nbsp;&percnt;
              <a data-toggle="tooltip" data-html="true" title="Distance from leader">
                <i class="fas fa-question-circle ml-1"></i>
              </a>
            </th>
            <th class='chart-column text-right'>
              Root Distance<br />
              <small class="text-muted">60-Min Chart</small>
            </th>
            <th class='chart-column text-right'>
              Vote Distance<br />
              <small class="text-muted">60-Min Chart</small>
            </th>
            <th class='chart-column text-right'>
              Skipped Slot&nbsp;&percnt;<br />
              <small class="text-muted">60-Min Chart</small>
            </th>
          </tr>

          <tr class="subhead">
            <td class="avatar-column"></td>
            <td></td>
            <td class="text-right">
              Best: <%= number_to_percentage((100 - @skipped_vote_percent_best.to_f * 100.0), precision: 2) %>
            </td>
            <td class="text-right">
              Md: <%= @tower_highest_block.to_i - @tower_median_block.to_i %>
              <br />
              Av: <%= @tower_average_block.round(1) %>
            </td>
            <td class="text-right">
              Md: <%= @tower_highest_vote.to_i - @tower_median_vote.to_i %>
              <br />
              Av: <%= @tower_average_vote.round(1) %>
            </td>
            <td class="text-right">
              Md: <%= number_to_percentage(@skipped_slot_median.to_f * 100.0, precision: 1) %>
              <br />
              Av: <%= number_to_percentage(@skipped_slot_average.to_f * 100.0, precision: 1) %>
            </td>
          </tr>
          </thead>

          <tbody>
          <%
            i = if params[:page].nil? || params[:page].empty? || params[:page].to_i.zero?
                  0
                else
                  (params[:page].to_i - 1) * Kaminari.config.default_per_page
                end
          %>
          <% @validators.each do |validator| %>
            <% i += 1 %>
            <tr id="row-<%=i%>">
              <td class="avatar-column p-0">
                <div class="number">
                  <%=
                    link_to i, validator_url(
                      network: params[:network],
                      account: validator.account,
                      order: params[:order],
                      page: params[:page],
                      refresh: params[:refresh]
                    )
                  %>
                </div>
                <div class="avatar">
                  <% if validator.avatar_url %>
                    <%= image_tag validator.avatar_url, class: 'img-circle-medium' %>
                  <% else %>
                    <%= image_tag 'https://keybase.io/images/no-photo/placeholder-avatar-180-x-180@2x.png', class: 'img-circle-medium' %>
                  <% end %>
                </div>
                <% if validator.delinquent? %>
                  <small class="text-danger">delinquent</small>
                <% end %>
              </td>

              <td class="name-column">
                <% validator_name = validator.name || shorten_key(validator.account) %>
                <%= link_to validator_url(network: params[:network], account: validator.account, order: params[:order], page: params[:page], refresh: params[:refresh]),
                            class: 'font-weight-bold' do %>
                  <span class="d-inline-block d-xl-none"><%= i %>.&nbsp;</span><%= validator_name %>
                <% end %>
                <% comm_class = 'text-danger' \
                                  if params[:network] == 'mainnet' && validator.commission.to_i == 100
                %>
                <small class="<%= comm_class %>">
                  (<span class="d-inline-block d-lg-none">Commission:&nbsp;</span><%= validator.commission %>%)
                </small><br />
                <span class="d-inline-block d-lg-none">Active Stake:&nbsp;</span>
                <small>
                  <%= number_with_delimiter lamports_to_sol(validator.active_stake) %>
                  (<%= number_to_percentage(validator.stake_concentration.to_f * 100.0, precision: 1) %>)
                </small>
                <br />
                <span class="d-inline-block d-lg-none">Sofware version:&nbsp;</span>
                <small class="<%= software_color_class(validator.software_version) %>">
                  <%= validator.software_version || 'N/A' %>
                </small>
                <br />
                <span class="d-inline-block d-lg-none">Scores:&nbsp;</span>
                <%= render 'validators/scores', validator: validator %>
              </td>

              <!-- SKIPPED VOTE % -->
              <td class="percent-column" id="skipped-vote-column-<%=i%>">
                <%
                  vahl = validator.vote_account_last&.vote_account_history_last
                  if vahl
                    skipped_votes_percent = (vahl.slot_index_current.to_i - vahl.credits_current.to_i)/vahl.slot_index_current.to_f
                  end
                %>
                <span class="d-inline-block d-lg-none">Skipped Vote&nbsp;% (distance from leader):&nbsp;</span>
                <%=
                  number_to_percentage(
                    (@skipped_vote_percent_best - skipped_votes_percent)*100.0,
                    precision: 2
                  ) if vahl
                  # number_to_percentage(
                  #   ((vahl.slot_index_current.to_i - vahl.credits_current.to_i)/vahl.slot_index_current.to_f)*100.0,
                  #   precision: 2
                  # ) if vahl
                %>
              </td>

              <td class="d-lg-none pt-0">
                <div class="row mb-3">
                  <div class="col pr-0">
                    <a class="chart-link" data-iterator="<%=i%>" data-target="root-distance" href="">
                      Root <br class="d-xxs-inline-block" />Distance
                    </a>
                  </div>
                  <div class="col pr-0">
                    <a class="chart-link" data-iterator="<%=i%>" data-target="vote-distance" href="">
                      Vote <br class="d-xxs-inline-block" />Distance
                    </a>
                  </div>
                  <div class="col">
                    <a class="chart-link" data-iterator="<%=i%>" data-target="skipped-slots" href="">
                      Skipped <br class="d-xxs-inline-block" />Slots
                    </a>
                  </div>
                </div>
              </td>
              <!-- ROOT DISTANCE -->
              <td class="chart-column d-none d-lg-table-cell" id="root-distance-<%=i%>">
                <%
                  vl = chart_x_scale(validator.score&.root_distance_history.to_a.count)
                  line_color = chart_line_color(validator.root_distance_score)
                  fill_color = chart_fill_color(validator.root_distance_score)
                  vector = validator.score&.root_distance_history.to_a[-vl..-1]
                %>
                <% max_value = vector&.max %>
                <% if max_value && max_value > Y_ROOT_DISTANCE_MAX %>
                  <% max_value_position = max_value_position(vector) %>
                  <% max_value_position_mobile = max_value_position(vector, min_position: false) %>
                  <div class="chart-top-container">
                    <div class="chart-top-value d-lg-none" style="width: <%=max_value_position_mobile%>">
                      <%= max_value %>
                    </div>
                    <div class="chart-top-value d-none d-lg-block" style="width: <%=max_value_position%>">
                      <%= max_value %>
                    </div>
                  </div>
                <% end %>
                <%= render 'validators/spark_line_block_distance',
                           account: validator.account,
                           vector: vector,
                           line_color: line_color,
                           fill_color: fill_color
                %>
              </td>

              <!-- VOTE DISTANCE -->
              <td class="chart-column d-none d-lg-table-cell" id=vote-distance-<%=i%>>
                <%
                  vl = chart_x_scale(validator.score&.vote_distance_history.to_a.count)
                  line_color = chart_line_color(validator.vote_distance_score)
                  fill_color = chart_fill_color(validator.vote_distance_score)
                  vote_vector = validator.score&.vote_distance_history.to_a[-vl..-1]
                %>
                <% max_value = vote_vector&.max %>
                <% if max_value && max_value > Y_VOTE_DISTANCE_MAX %>
                  <% max_value_position = max_value_position(vote_vector) %>
                  <% max_value_position_mobile = max_value_position(vote_vector, min_position: false) %>
                  <div class="chart-top-container">
                    <div class="chart-top-value d-lg-none" style="width: <%=max_value_position_mobile%>">
                      <%= max_value %>
                    </div>
                    <div class="chart-top-value d-none d-lg-block" style="width: <%=max_value_position%>">
                      <%= max_value %>
                    </div>
                  </div>
                <% end %>
                <%= render 'validators/spark_line_vote_distance',
                           account: validator.account,
                           vector: vote_vector,
                           line_color: line_color,
                           fill_color: fill_color
                %>
              </td>

              <!-- SKIPPED SLOTS  -->
              <td class="chart-column d-none d-lg-table-cell" id="skipped-slots-<%=i%>">
                <%
                  vl = chart_x_scale(validator.score&.skipped_slot_history.to_a.count)
                  ma = chart_x_scale(validator.score&.skipped_slot_moving_average_history.to_a.count)

                  skipped_slots_moving_avg = validator.score&.skipped_slot_moving_average_history.to_a[-ma..-1]&.map { |v| (v.to_f*100.0).round(1) }
                  slot_vector = validator.score&.skipped_slot_history.to_a[-vl..-1].map { |v| (v.to_f*100.0).round(1) }

                  line_color = chart_line_color(validator.skipped_slot_score)
                  fill_color = chart_fill_color(validator.skipped_slot_score)
                %>
                <%= render 'validators/spark_line_skipped_slots',
                           account: validator.account,
                           vector: slot_vector,
                           line_color: line_color,
                           fill_color: fill_color,
                           moving_avg: skipped_slots_moving_avg
                %>
              </td>
            </tr>
            <% if params[:order] == 'stake' && i == @at_33_stake%>
              <tr id="row-halt-line">
                  <td colspan=6>
                    CUMULATIVE STAKE ABOVE CAN HALT THE NETWORK -- IMPROVE DECENTRALIZATION AND DELEGATE TO VALIDATORS BELOW
                  </td>
              </tr>
            <% end %>
          <% end %>
          </tbody>
        </table>

        <div class="px-15">
          <p class="small muted">
            Data updated at <%= @batch&.created_at || 'N/A' %> in batch <%= @batch&.uuid || 'N/A' %>
          </p>
          <%= paginate @validators %>
        </div>


      </div>
    </div>
  </div>
<% end %>
<%= render 'validators/software_versions' %>
