<%= render 'validators/banner' %>
<% unless @validators.empty? %>

  <%= render 'validators/stats' %>

  <div class="card">
    <div class="card-content pb-0">
      <h1 class="h2 card-heading">Solana <%= params[:network].capitalize %> Validators</h1>

      <%= render 'validators/sort_bar' %>

      <div class="row">
        <div class="col-md-9 col-lg-10">
          <p class="small muted">
            Data updated at <%= @batch&.created_at || 'N/A' %> in batch <%= @batch&.uuid || 'N/A' %>. <%= link_to 'See Data Centers', data_centers_url(network: params[:network]) %>
          </p>
        </div>
        <div class='col-md-3 col-lg-2 toggle-container'>
          <% if params[:refresh] == 'true' %>
            <%= link_to raw('<i class="fas fa-toggle-on toggle"></i>'), url_for(order: params[:order], page: params[:page], network: params[:network], q: params[:q], refresh: false) %>
            <p class="small muted toggle-label">REFRESH ON</p>
          <% else %>
            <%= link_to raw('<i class="fas fa-toggle-off toggle"></i>'), url_for(order: params[:order], page: params[:page], network: params[:network], q: params[:q], refresh: true) %>
            <p class="small muted toggle-label">REFRESH OFF</p>
          <% end %>
        </div>
      </div>
    </div>


    <div class="row">
      <div class="col-sm-12">
        <table id="validators-table" class='table'>
          <thead>
            <tr>
              <th class="avatar-column">#</th>
              <th class="name-column">
                Name <small class="text-muted">(Commission)</small><br />
                Active Stake <small class="text-muted">(<%= number_to_human(lamports_to_sol(@total_active_stake)) %>)</small><br />
                Software
                <small class="text-muted">
                  <% if params[:network] == 'mainnet' %>
                    (<%= MAINNET_CLUSTER_VERSION %>)
                  <% else %>
                    (<%= TESTNET_CLUSTER_VERSION %>)
                  <% end %>
                </small>
                <br />
                Scores <small class="text-muted">(total)</small>
              </th>
              <th class='percent-column text-right'>
                Skipped Vote&nbsp;&percnt;
                <a data-toggle="tooltip" data-html="true" title="Distance from leader">
                  <i class="fas fa-question-circle ml-1"></i>
                </a>
              </th>
              <th class='chart-column text-right'>
                Root Distance<br />
                <small class="text-muted">60-Min Chart</small>
              </th>
              <th class='chart-column text-right'>
                Vote Distance<br />
                <small class="text-muted">60-Min Chart</small>
              </th>
              <th class='chart-column text-right'>
                Skipped Slot&nbsp;&percnt;<br />
                <small class="text-muted">60-Min Chart</small>
              </th>
            </tr>

            <tr class="subhead">
              <td colspan="2"></td>
              <td class="text-right">
                Best: <%= number_to_percentage((100 - @skipped_vote_percent_best.to_f * 100.0), precision: 2) %>
              </td>
              <td class="text-right"><%= number_with_delimiter @tower_highest_block %></td>
              <td class="text-right"><%= number_with_delimiter @tower_highest_vote %></td>
              <td class="text-right">
                Md: <%= number_to_percentage(@skipped_slot_median.to_f * 100.0, precision: 1) %>
                <br />
                Av: <%= number_to_percentage(@skipped_slot_average.to_f * 100.0, precision: 1) %>
              </td>
            </tr>
          </thead>

          <tbody>
            <%
              i = if params[:page].nil? || params[:page].empty? || params[:page].to_i.zero?
                    0
                  else
                    (params[:page].to_i - 1) * Kaminari.config.default_per_page
                  end
            %>
            <% @validators.each do |validator| %>
              <% i += 1 %>
              <tr>
                <td class="avatar-column p-0">
                  <div class="number">
                    <%=
                      link_to i, validator_url(
                        network: params[:network],
                        account: validator.account,
                        order: params[:order],
                        page: params[:page],
                        refresh: params[:refresh]
                      )
                    %>
                  </div>
                  <div class="avatar">
                    <% if validator.avatar_url %>
                      <%= image_tag validator.avatar_url, class: 'img-circle-medium' %>
                    <% else %>
                      <%= image_tag 'https://keybase.io/images/no-photo/placeholder-avatar-180-x-180@2x.png', class: 'img-circle-medium' %>
                    <% end %>
                  </div>
                  <% if validator.delinquent? %>
                    <small class="text-danger">delinquent</small>
                  <% end %>
                </td>

                <td class="name-column">
                  <% validator_name = validator.name || shorten_key(validator.account) %>
                  <%= link_to validator_name,
                              validator_url(
                                network: params[:network],
                                account: validator.account,
                                order: params[:order],
                                page: params[:page],
                                refresh: params[:refresh]
                              ), class: 'font-weight-bold' %>
                  <% comm_class = 'text-danger' \
                                  if params[:network] == 'mainnet' && validator.commission.to_i == 100
                  %>
                  <small class="<%= comm_class %>">(<%= validator.commission %>%)</small><br />
                  <small>
                    <%= number_with_delimiter lamports_to_sol(validator.active_stake) %>
                    (<%= number_to_percentage(validator.stake_concentration.to_f * 100.0, precision: 1) %>)
                  </small>
                  <br />
                  <small class="<%= software_color_class(validator.software_version) %>">
                    <%= validator.software_version || 'N/A' %>
                  </small>
                  <br />
                  <%= render 'validators/scores', validator: validator %>
                </td>

                <!-- SKIPPED VOTE % -->
                <td class="">
                  <%
                    vahl = validator.vote_account_last&.vote_account_history_last
                    if vahl
                      skipped_votes_percent = (vahl.slot_index_current.to_i - vahl.credits_current.to_i)/vahl.slot_index_current.to_f
                    end
                  %>
                  <%=
                    number_to_percentage(
                      (@skipped_vote_percent_best - skipped_votes_percent)*100.0,
                      precision: 2
                    ) if vahl
                    # number_to_percentage(
                    #   ((vahl.slot_index_current.to_i - vahl.credits_current.to_i)/vahl.slot_index_current.to_f)*100.0,
                    #   precision: 2
                    # ) if vahl
                  %>
                </td>

                <!-- ROOT DISTANCE -->
                <td class="chart-column">
                  <%
                    vl = set_chart_x_scale(validator.score&.root_distance_history.to_a.count)
                    line_color = set_chart_line_color(validator.root_distance_score)
                    fill_color = set_chart_fill_color(validator.root_distance_score)
                    vector = validator.score&.root_distance_history.to_a[-vl..-1]
                  %>
                  <% max_value = vector&.max %>
                  <% if max_value > Y_ROOT_DISTANCE_MAX %>
                    <% max_value_position = set_max_value_position(vector) %>
                    <div class="chart-top-container">
                      <div class="chart-top-value" style="width: <%=max_value_position%>">
                        <%= max_value %>
                      </div>
                    </div>
                  <% end %>
                  <%= render 'validators/spark_line_block_distance',
                             account: validator.account,
                             vector: vector,
                             line_color: line_color,
                             fill_color: fill_color
                  %>
                </td>

                <!-- VOTE DISTANCE -->
                <td class="chart-column">
                  <%
                    vl = set_chart_x_scale(validator.score&.vote_distance_history.to_a.count)
                    line_color = set_chart_line_color(validator.vote_distance_score)
                    fill_color = set_chart_fill_color(validator.vote_distance_score)
                    vote_vector = validator.score&.vote_distance_history.to_a[-vl..-1]
                  %>
                  <% max_value = vote_vector&.max %>
                  <% if max_value > Y_VOTE_DISTANCE_MAX %>
                    <% max_value_position = set_max_value_position(vote_vector) %>
                    <div class="chart-top-container">
                      <div class="chart-top-value" style="width: <%=max_value_position%>">
                        <%= max_value %>
                      </div>
                    </div>
                  <% end %>
                  <%= render 'validators/spark_line_vote_distance',
                             account: validator.account,
                             vector: vote_vector,
                             line_color: line_color,
                             fill_color: fill_color
                  %>
                </td>

                <!-- SKIPPED SLOTS  -->
                <td class="chart-column text-right">
                  <%
                    vl = set_chart_x_scale(validator.score&.skipped_slot_history.to_a.count)
                    line_color = set_chart_line_color(validator.skipped_slot_score)
                    fill_color = set_chart_fill_color(validator.skipped_slot_score)
                    slot_vector = validator.score&.skipped_slot_history.to_a[-vl..-1].map {|v| (v.to_f*100.0).round(1)}
                  %>
                  <%= render 'validators/spark_line_skipped_slots',
                             account: validator.account,
                             vector: slot_vector,
                             line_color: line_color,
                             fill_color: fill_color
                  %>
                </td>
              </tr>
            <% end %>
          </tbody>
        </table>

        <div class="px-15">
          <p class="small muted">Data updated at <%= @batch&.created_at || 'N/A' %> in batch <%= @batch&.uuid || 'N/A' %></p>
          <%= paginate @validators %>
        </div>


      </div>
    </div>
  </div>
<% end %>
<%= render 'validators/software_versions' %>